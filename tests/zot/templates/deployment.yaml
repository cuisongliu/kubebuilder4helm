apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zot.fullname" . }}
  labels:
    {{- include "zot.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "zot.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "zot.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zot.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: zot
              containerPort: 5000
              protocol: TCP
          volumeMounts:
            - mountPath: /tmp/serving-certs
              name: cert
              readOnly: true
            - mountPath: '/etc/zot/htpasswd'
              name: {{ .Release.Name }}-secret
              subPath: htpasswd
            - mountPath: '/etc/zot/config.json'
              name: {{ .Release.Name }}-config
              subPath: config.json
            - mountPath: '/var/lib/registry'
              name: {{ .Release.Name }}-volume
          livenessProbe:
            httpGet:
              path: /v2/
              port: 5000
              scheme: HTTPS
              httpHeaders:
                - name: Authorization
                  value: Basic {{ printf "%s:%s" .Values.authHeaderUser .Values.authHeaderPassword | b64enc }}
          readinessProbe:
            httpGet:
              path: /v2/
              port: 5000
              scheme: HTTPS
              httpHeaders:
                - name: Authorization
                  value: Basic {{ printf "%s:%s" .Values.authHeaderUser .Values.authHeaderPassword | b64enc }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: {{.Values.tlsSecretName}}
        - name: {{ .Release.Name }}-config
          configMap:
            name: {{ .Release.Name }}-config
        - name: {{ .Release.Name }}-secret
          secret:
            secretName: {{ .Release.Name }}-secret
        - name: {{ .Release.Name }}-volume
          persistentVolumeClaim:
            claimName: {{ .Values.pvc.name | default (printf "%s-pvc" .Release.Name) }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
